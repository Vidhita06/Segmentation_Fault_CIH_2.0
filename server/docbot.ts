import { GoogleGenerativeAI } from "@google/generative-ai";
import type { HealthReport } from "@shared/schema";

const genAI = new GoogleGenerativeAI({ apiKey: process.env.GEMINI_API_KEY! });

export interface HealthAnalysis {
  overallScore: number;
  riskLevel: "low" | "medium" | "high";
  recommendations: string[];
  exerciseSuggestions: ExerciseSuggestion[];
  alerts: HealthAlert[];
  insights: string[];
}

export interface ExerciseSuggestion {
  type: string;
  duration: string;
  description: string;
  frequency: string;
  reason: string;
}

export interface HealthAlert {
  severity: "info" | "warning" | "critical";
  message: string;
  metric: string;
  value: string;
  recommendation: string;
}

export async function analyzeHealthReports(reports: HealthReport[]): Promise<HealthAnalysis> {
  if (reports.length === 0) {
    return {
      overallScore: 3,
      riskLevel: "low",
      recommendations: ["Upload your first health report to get personalized insights"],
      exerciseSuggestions: [{
        type: "Walking",
        duration: "20-30 minutes",
        description: "Light walking exercise to maintain general fitness",
        frequency: "Daily",
        reason: "General health maintenance"
      }],
      alerts: [],
      insights: ["No health data available yet. Please upload your health reports to get personalized analysis."]
    };
  }

  const healthData = reports.map(report => ({
    date: report.uploadDate,
    bloodPressure: report.bloodPressure,
    bloodSugar: report.bloodSugar,
    heartRate: report.heartRate
  }));

  const prompt = `
You are DocBot, an AI health assistant for elderly users. Analyze the following health data and provide personalized recommendations.

Health Data: ${JSON.stringify(healthData, null, 2)}

Provide analysis in the following JSON format:
{
  "overallScore": number (1-5),
  "riskLevel": "low" | "medium" | "high",
  "recommendations": [array of 3-5 health recommendations],
  "exerciseSuggestions": [
    {
      "type": "Exercise name",
      "duration": "time duration",
      "description": "detailed description",
      "frequency": "how often",
      "reason": "why this exercise is recommended"
    }
  ],
  "alerts": [
    {
      "severity": "info" | "warning" | "critical",
      "message": "alert message",
      "metric": "which health metric",
      "value": "current value",
      "recommendation": "what to do"
    }
  ],
  "insights": [array of 2-4 key health insights]
}

Guidelines:
- For high blood pressure (>140/90): recommend walking, light cardio
- For low mobility: suggest gentle stretches, chair exercises
- For irregular heart rate: recommend breathing exercises, gentle yoga
- For diabetes management: suggest post-meal walks
- Focus on safe, elderly-appropriate exercises
- Flag any abnormal values that need medical attention
- Be encouraging and supportive in tone
`;

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = await response.text();

    const analysis: HealthAnalysis = JSON.parse(text || "{}");

    const disclaimer = "This analysis is generated by an AI and is for informational purposes only. It is not a substitute for professional medical advice. Please consult with a healthcare provider for any health concerns.";
    analysis.recommendations?.push(disclaimer);

    return analysis;

  } catch (error) {
    console.error("Gemini health analysis error:", error);
    return generateFallbackAnalysis(reports);
  }
}

function generateFallbackAnalysis(reports: HealthReport[]): HealthAnalysis {
  const latest = reports[reports.length - 1];
  const recommendations: string[] = [];
  const exerciseSuggestions: ExerciseSuggestion[] = [];
  const alerts: HealthAlert[] = [];
  const insights: string[] = [];

  let overallScore = 3;
  let riskLevel: "low" | "medium" | "high" = "low";

  if (latest.bloodPressure) {
    const [systolic] = latest.bloodPressure.split("/").map(Number);
    if (systolic > 140) {
      overallScore = 2;
      riskLevel = "medium";
      alerts.push({
        severity: "warning",
        message: "Blood pressure is elevated",
        metric: "Blood Pressure",
        value: latest.bloodPressure,
        recommendation: "Try gentle walking and consult your doctor"
      });
      exerciseSuggestions.push({
        type: "Walking",
        duration: "15-20 minutes",
        description: "Gentle walking to lower blood pressure",
        frequency: "Daily",
        reason: "Supports cardiovascular health"
      });
    }
  }

  if (latest.heartRate) {
    const hr = parseInt(latest.heartRate);
    if (hr < 60 || hr > 100) {
      alerts.push({
        severity: hr > 120 ? "critical" : "warning",
        message: `Heart rate is ${hr > 100 ? 'elevated' : 'low'}`,
        metric: "Heart Rate",
        value: latest.heartRate,
        recommendation: "Consult your doctor; try breathing exercises"
      });
      exerciseSuggestions.push({
        type: "Breathing Exercises",
        duration: "5-10 minutes",
        description: "Deep breathing to calm the heart rate",
        frequency: "2-3 times daily",
        reason: "Can stabilize irregular heart rhythms"
      });
    }
  }

  recommendations.push(
    "Eat a healthy diet rich in vegetables and fruits",
    "Stay hydrated throughout the day",
    "Maintain consistent sleep habits",
    "Take medications as prescribed"
  );

  if (exerciseSuggestions.length === 0) {
    exerciseSuggestions.push({
      type: "Chair Exercises",
      duration: "10 minutes",
      description: "Gentle seated movements to improve mobility",
      frequency: "3 times/week",
      reason: "Safe activity for those with limited movement"
    });
  }

  insights.push(
    `Health report from ${new Date(latest.uploadDate!).toLocaleDateString()}`,
    "Daily activity can greatly impact overall well-being",
    "Continue tracking to notice patterns"
  );

  return {
    overallScore,
    riskLevel,
    recommendations,
    exerciseSuggestions,
    alerts,
    insights
  };
}

export async function getChatResponse(message: string, userId: number): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    const chat = await model.generateContent([
      {
        role: "user",
        parts: [{
          text: `User ID: ${userId}\nYou are DocBot, an elderly health assistant. Message: "${message}".\nProvide a helpful, supportive response with clear advice.`
        }]
      }
    ]);

    const response = await chat.response;
    const reply = await response.text();
    return reply || "I'm here to help, but something went wrong. Please try again.";
  } catch (error) {
    console.error("Gemini chat error:", error);
    return "I'm experiencing a glitch. Please try again later.";
  }
}

export async function generatePersonalizedInsight(userAge?: number, healthConditions?: string[]): Promise<string> {
  const prompt = `
Generate one simple, encouraging health tip for an elderly person.
Age: ${userAge || "unknown"}
Conditions: ${healthConditions?.join(", ") || "none specified"}

Keep it short, practical, and positive.
`;

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = await response.text();

    return text?.trim() || "Stay positive and move a little every day!";
  } catch (error) {
    console.error("Gemini tip error:", error);
    return "Keep your body and mind active â€“ a short walk and a smile go a long way!";
  }
}
